// Mocks generated by Mockito 5.4.5 from annotations
// in snowcast/test/features/snow_notifications/data/service/snow_notification_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart' as _i3;
import 'package:flutter_local_notifications/src/initialization_settings.dart' as _i5;
import 'package:flutter_local_notifications/src/notification_details.dart' as _i7;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart' as _i9;
import 'package:flutter_local_notifications/src/types.dart' as _i10;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:snowcast/features/mountain_selector/presentation/bloc/mountain_state.dart' as _i12;
import 'package:snowcast/features/notifications/data/repository/notification_repository.dart' as _i11;
import 'package:snowcast/features/weather/data/repository/weather_repository.dart' as _i13;
import 'package:snowcast/features/weather/domain/entity/weather.dart' as _i2;
import 'package:timezone/timezone.dart' as _i8;
import 'package:workmanager/src/options.dart' as _i15;
import 'package:workmanager/src/workmanager.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeather_0 extends _i1.SmartFake implements _i2.Weather {
  _FakeWeather_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock implements _i3.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool?> initialize(
    _i5.InitializationSettings? initializationSettings, {
    _i6.DidReceiveNotificationResponseCallback? onDidReceiveNotificationResponse,
    _i6.DidReceiveBackgroundNotificationResponseCallback? onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [initializationSettings],
          {
            #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
            #onDidReceiveBackgroundNotificationResponse: onDidReceiveBackgroundNotificationResponse,
          },
        ),
        returnValue: _i4.Future<bool?>.value(),
      ) as _i4.Future<bool?>);

  @override
  _i4.Future<_i6.NotificationAppLaunchDetails?> getNotificationAppLaunchDetails() => (super.noSuchMethod(
        Invocation.method(#getNotificationAppLaunchDetails, []),
        returnValue: _i4.Future<_i6.NotificationAppLaunchDetails?>.value(),
      ) as _i4.Future<_i6.NotificationAppLaunchDetails?>);

  @override
  _i4.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i7.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [id, title, body, notificationDetails],
          {#payload: payload},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancel(int? id, {String? tag}) => (super.noSuchMethod(
        Invocation.method(#cancel, [id], {#tag: tag}),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(#cancelAll, []),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i8.TZDateTime? scheduledDate,
    _i7.NotificationDetails? notificationDetails, {
    required _i9.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i10.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zonedSchedule,
          [id, title, body, scheduledDate, notificationDetails],
          {
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i6.RepeatInterval? repeatInterval,
    _i7.NotificationDetails? notificationDetails, {
    required _i9.AndroidScheduleMode? androidScheduleMode,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShow,
          [id, title, body, repeatInterval, notificationDetails],
          {#androidScheduleMode: androidScheduleMode, #payload: payload},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval,
    _i7.NotificationDetails? notificationDetails, {
    _i9.AndroidScheduleMode? androidScheduleMode = _i9.AndroidScheduleMode.exact,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShowWithDuration,
          [id, title, body, repeatDurationInterval, notificationDetails],
          {#androidScheduleMode: androidScheduleMode, #payload: payload},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.PendingNotificationRequest>> pendingNotificationRequests() => (super.noSuchMethod(
        Invocation.method(#pendingNotificationRequests, []),
        returnValue: _i4.Future<List<_i6.PendingNotificationRequest>>.value(
          <_i6.PendingNotificationRequest>[],
        ),
      ) as _i4.Future<List<_i6.PendingNotificationRequest>>);

  @override
  _i4.Future<List<_i6.ActiveNotification>> getActiveNotifications() => (super.noSuchMethod(
        Invocation.method(#getActiveNotifications, []),
        returnValue: _i4.Future<List<_i6.ActiveNotification>>.value(
          <_i6.ActiveNotification>[],
        ),
      ) as _i4.Future<List<_i6.ActiveNotification>>);
}

/// A class which mocks [NotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRepository extends _i1.Mock implements _i11.NotificationRepository {
  MockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<_i12.Mountain, bool>> getPreferences() => (super.noSuchMethod(
        Invocation.method(#getPreferences, []),
        returnValue: _i4.Future<Map<_i12.Mountain, bool>>.value(
          <_i12.Mountain, bool>{},
        ),
      ) as _i4.Future<Map<_i12.Mountain, bool>>);

  @override
  _i4.Future<void> savePreferences(Map<_i12.Mountain, bool>? preferences) => (super.noSuchMethod(
        Invocation.method(#savePreferences, [preferences]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i13.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Weather> getWeather({
    required String? lat,
    required String? lon,
    required String? alt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getWeather, [], {
          #lat: lat,
          #lon: lon,
          #alt: alt,
        }),
        returnValue: _i4.Future<_i2.Weather>.value(
          _FakeWeather_0(
            this,
            Invocation.method(#getWeather, [], {
              #lat: lat,
              #lon: lon,
              #alt: alt,
            }),
          ),
        ),
      ) as _i4.Future<_i2.Weather>);
}

/// A class which mocks [Workmanager].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkmanager extends _i1.Mock implements _i14.Workmanager {
  MockWorkmanager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void executeTask(_i14.BackgroundTaskHandler? backgroundTask) => super.noSuchMethod(
        Invocation.method(#executeTask, [backgroundTask]),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> initialize(
    Function? callbackDispatcher, {
    bool? isInDebugMode = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [callbackDispatcher],
          {#isInDebugMode: isInDebugMode},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> registerOneOffTask(
    String? uniqueName,
    String? taskName, {
    String? tag,
    _i15.ExistingWorkPolicy? existingWorkPolicy,
    Duration? initialDelay = Duration.zero,
    _i15.Constraints? constraints,
    _i15.BackoffPolicy? backoffPolicy,
    Duration? backoffPolicyDelay = Duration.zero,
    _i15.OutOfQuotaPolicy? outOfQuotaPolicy,
    Map<String, dynamic>? inputData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerOneOffTask,
          [uniqueName, taskName],
          {
            #tag: tag,
            #existingWorkPolicy: existingWorkPolicy,
            #initialDelay: initialDelay,
            #constraints: constraints,
            #backoffPolicy: backoffPolicy,
            #backoffPolicyDelay: backoffPolicyDelay,
            #outOfQuotaPolicy: outOfQuotaPolicy,
            #inputData: inputData,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> registerPeriodicTask(
    String? uniqueName,
    String? taskName, {
    Duration? frequency,
    String? tag,
    _i15.ExistingWorkPolicy? existingWorkPolicy,
    Duration? initialDelay = Duration.zero,
    _i15.Constraints? constraints,
    _i15.BackoffPolicy? backoffPolicy,
    Duration? backoffPolicyDelay = Duration.zero,
    _i15.OutOfQuotaPolicy? outOfQuotaPolicy,
    Map<String, dynamic>? inputData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerPeriodicTask,
          [uniqueName, taskName],
          {
            #frequency: frequency,
            #tag: tag,
            #existingWorkPolicy: existingWorkPolicy,
            #initialDelay: initialDelay,
            #constraints: constraints,
            #backoffPolicy: backoffPolicy,
            #backoffPolicyDelay: backoffPolicyDelay,
            #outOfQuotaPolicy: outOfQuotaPolicy,
            #inputData: inputData,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelByUniqueName(String? uniqueName) => (super.noSuchMethod(
        Invocation.method(#cancelByUniqueName, [uniqueName]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelByTag(String? tag) => (super.noSuchMethod(
        Invocation.method(#cancelByTag, [tag]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(#cancelAll, []),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
